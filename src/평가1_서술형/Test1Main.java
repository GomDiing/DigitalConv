package 평가1_서술형;

/*
 * 1. 변수명 짓기 : 대소문자, 특수문자(_,$), 숫자 가능 (앞에 오면 안됨)
 * 에약어 사용 안됨, 이름 사이 공백 안됨, 길이제한 없음
 * 복합명사 사용시 첫번째는 소문자, 다음에 오는 단어는 대문자 : camel표기법 사용
 * 사용목적에 맞게끔 이름을 지어야함
 *
 * 2. 변수 선언시 사용되는 자료형별 메모리 할당 크기 확인
 * 3. 변수란? : 하나의 값을 저장하기 위한 공간간
 * 4. 기본 자료형 변수와 참조 자료형 변수의 차이점
 * 기본 자료형 : 실제 자료형에 값을 저장하는 것 (boolean, byte, char, int, ...)
 * 참조 자료형 : 실제 값을 저장하지 않고 값이 있는 주소를 저장함
 * 5. 상수란? 한번만 값을 저장하고 난 후 더 이상 변경 불가 (Read Only 상태가 됨)
 * 6. 문자열을 담는 변수를 만들고 문자열 대입하기 (String str = "Java";)
 * 7. 자동 형변환 : 데이터 타입이 다른 경우 유리한 방향
 * 8. 강제 형변환 : 값의 범위가 큰 것에서 작은 것으로 변경할때... (개발자가 의도를 가지고 변경하는 것)
 * 9. 단항연산자 : !(현재 값을 부정), ++(변수값 1 증가), --(변수값 1 감소), +34, -34, ~(비트 부호를 반전)
 * 10. 다항연산자 : (산술연산자 +, -, *, /, %), 비교연산자(>, <, >=, <=, !=, ==)
 * 11. 논리연산자 (&&, ||), 비트연산자 (&(둘다 1이면 1), |(둘 중 하나만 1이면 1), ^(XOR : 값이 다르면 1)
 * 12. 산술연산자에서 각 연산자의 의미 (+:더한값 반환, -:뺀값 반환, *곱해서 반환, /:나눈값을 반환, %:나눈 나머지를 반환)
 * 13. 단향 연산자 중 ++. -- : 증감연산자 (변수의 값을 1 더하거나 뺀다)
 * 14. 논리연산자 && 둘 다 참이어야 참 , || : 둘 중 하나만 참이면 참
 * 15. 전위 연산자 : 먼저 값을 증가하고 대입이 이루어짐, 후위 연산자 : 대입하고 증가가 이루어
 * 16. 논리(관계)연산자 확인 문제
 * 17. 연산 결과가 논리 값이 나오는 연산자를 네가지 쓰시오 (논리/비교 연산자 전부) (<, !=, &&, ||)
 * 18. 연산자 우선 순위 기술 (산술, 삼항, 논리, 최우선, 대입)
 *      : 최우선 -> 산술 -> 논리 -> 삼항 -> 대입
 * 19. 삼항연산자 설명 : 조건식에서 참과 거짓만 있는 경우 삼항연산자로 표현 가능
 * (조건식) ? 참 인경우 수행 : 거짓은 경우 수행;
 * 20. 조건문의 종류를 쓰시오. (if , switch)
 * 21. 반복문의 조건을 쓰시오. (for, while)
 * 22. if(조건식) : 값, 비교연산자, 논리연산자, 비교연산자를 통한 값의 범위
 * 23. switch(값) : 정수, 문자, 문자열
 * 24. 코딩 결과 확인 문제
 * 25. 코딩 결과 확인 문제(for) : 구구단 출력 문제(2단만 출력), for문의 반복 수행 범위 확인
 */
public class Test1Main {
    public static void main(String[] args) {
        // 제출된 문제
        // 정수 타입
        boolean isTrue = true; // boolean Type : 참과 거짓 판별, 1Byte, 기본값은 False
        char ch = '여';  // 1개의 문자를 저장하기 위한 공간, 2Byte
        byte bt = 127;  // 1Byte 정수 타입의 자료형 (양수만있고 음수는 없다) : -128 ~ 127
        short st = 32000;   // 2Byte 정수 타입의 자료 (-32,xxx ~ +32,xxx)
        int it = 210000000; // 4Byte 정수 타입의 자료형 (-21억 ~ 21억)
        long lt = 3200000000000000000L; // 8Byte 정수 타입 (대략 -450경 ~ 450경)
        // 실수 타입
        float ft = 3.14f; // 4Byte 실수형 (소수점이하가 있음)
        double dt = 3.14; // 8Byte 실수형
        // 상수
        final double PI = 3.14; // final 키워드 사용으로 상수 만듬
        // 자동 형변환
        double avr = (98 + 56 + 78) / 3.00;
        System.out.println(avr);
        // 강제 형변환
        int avrl = (int)30000000000L;

        // 다항 연산자
        int num1 = 10, num2 = 20;
        int sum = num1++ + ++num2;

        // 관계연산자 확인 문제
        boolean a = true;
        boolean b = false;

        System.out.println(a || b); // true : 둘 중 하나만 참이면 참
        System.out.println(!(a && b)); // true : 괄호 내부 조건이 false였고 !연산자로 반전되어 true

        // 17. 연산 결과가 논리 값이 나오는 연산자
        int x = 10;
        int y = 20;
        System.out.println(x > y);
        System.out.println(x < y);
        System.out.println(x == y);
        System.out.println(x != y);
        System.out.println(x > 0 && x < y);

        // 24. 코딩 결과 확인 문제
        for (int i = 1; i <=5; i++) { // 1 ~ 5까지 수행
           System.out.println(i + "*" + i + "=" + (i*i));
        }

        // 25. 코딩 결과 확인 문제
        for (int i = 1; i < 10; i++) { // 여기서 묻는 문제는 반복문의 범위를 확인하는 문제
            System.out.println(2 + "*" + i + "=" + (2*i));
        }
    }
}